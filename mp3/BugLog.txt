Checkpoint 1:
-RTC interrupt would not be triggered- this was because enable_irq for the second PIC was buggy
-initially forgot to account for video memory in the page
-thought our paging setup was incorrect because we didn't fully understand that the way we page aligned the address always leaves 12 bits zeroed. We initially believed that the __aligned__ macro would keep twelve zeroes in front of the base address and append the other bits behind it. In reality, the twelve zeroes are clobbered by the flag bits, and that's alright. It turns out the first twelve bits are zeroed out when the processor deduces the base address, enforcing the 4 kb/4mb memory alignment.

Checkpoint 2:
-RTC would not work when demoing with ctrl-tests, this was because we forgot to set an interrupt rate with write(OSDEV LIED!!!)
-When opening a binary file, we didn't read the entire file because we would terminate reading on a null character
-When you type some keys and then press backspace, when you reach the end of the buffer we page fault
-The keyboard driver would print out a null for unknown scancodes, but when echoing the buffer back to the screen, we could terminate printing on this null, even if there were actual characters later in the buffer we needed to print
- In our keyboard driver (and interrupt handling in general), we would initially point the idt entry for those respective interrupts directly to C functions. In contrast to the last checkpoint, we realized this time around that this practice is rather cumbersome as it messes with the stack in a way we must deal with when leaving the interrupt. In CP1, we combated the C calling convention with a corresponding 'leave' command with inline assembly, before iret-ing. This practice takes processing power to push and pop elements from the stack and time, all of which that can be avoided by simply using assembly wrappers. In this checkpoint, we pivoted to this more elegant implementation.

Checkpoint 3:
-When shell halted and exited, it pagefaulted instead of restarting. This was due to an incomplete halt implementation.
- Our incorrect stack setup impaired our ability to use iret to switch into user-mode, executing user programs
-We had general protection errors due to poor stack setup
-We needed to put an assembly wrapper around all of our system calls to keep the stack correct
-PCB's way of keeping track of parent and child was faulty.
-We didn't check that user level programs were calling the right number when reaching the system call dispatcher
-If a program reaches an exception, we don't terminate it, we just reach the screen-of-death, print the exception, and then wait.
-We needed to stop accepting input into the terminal buffer when we reach the end of its length, so we don't pagefault by writing into uninitialized memory.

Checkpoint 4:
-Our vidmap was mapped to a 4mb page and not a 4kb page, so we kept page faulting as we did not properly grab the source address of video memory.
-When grabbing an argument, we didn't return -1 if no argument actually existed
-We forgot to actually call open for a respective loaded 'file', when its respective sys_call was called.
-Same for close.

Checkpoint 5:
-Our PIT interrupt would not trigger....we forgot to enable the interrupt in the first place
-When performing the context switch, we didn't save esp and ebp properly
-When switching the terminal rapidly, we didn't save all the variables we needed to execute, so bad bad things would happen.
-We needed to differentiate properly between the terminal that's being executed on screen, and the terminal that's being handled behind the scenes.
-We didn't handle the enter keypresses correctly, so sometimes we'd have execute executing a program in a terminal that wasn't the active one.
-We didn't correctly handle video memory paging, so a program like fish would appear in all terminals
-We didn't fully copy over video memory when performing the terminal switch. We only copied over half of it because we forgot to multiply by 2 to account for video memory size
-On the program stack, we built it up so that each terminal had space for 4 additional processes. But we forgot to account for this in a bunch of places, so we had lots of random problematic page faults.


Final Demo:

Extra Credit:
	SERIAL: When we first booted up the kernel, it would crash, because the input serial buffer almost immediately overflowed
            We swapped around the port and the information written to the port, so we didn't initialize our settings correctly
            When we grab an interrupt, we forgot to send an EOI, so we wouldn't get any more interrupts and the buffer would overflow
	MOUSE: We didn't correctly read from the mouse cycle bytes correctly, because they were swapped around
	       When we received the mouse data, we thought it was just x and y position, not x and y velocity, so we had to refine the input data to actually get correct mouse position
	COLORED TEXT VIDEO: We had problems when writing to specific coordinates on the text video screen.
	    When we were outputting colored video characters, we were accidentally overwriting the attribute bits so we weren't setting them correctly. 
	SOUND: The enable_irq() function for IRQ0 by which the sound driver operates was not called. Also our ports and bytes 			   arguments were switched. Another bug we had was failing to setup the correct syntax for QEMU's target.
